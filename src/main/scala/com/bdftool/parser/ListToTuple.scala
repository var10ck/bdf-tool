package com.bdftool.parser

object ListToTuple {
  def toTuple[A](list: Seq[A]): Product = {
    list match {
      case _1 :: Nil                                     => Tuple1(_1)
      case _1 :: _2 :: Nil                               => Tuple2(_1, _2)
      case _1 :: _2 :: _3 :: Nil                         => Tuple3(_1, _2, _3)
      case _1 :: _2 :: _3 :: _4 :: Nil                   => Tuple4(_1, _2, _3, _4)
      case _1 :: _2 :: _3 :: _4 :: _5 :: Nil             => Tuple5(_1, _2, _3, _4, _5)
      case _1 :: _2 :: _3 :: _4 :: _5 :: _6 :: Nil       => Tuple6(_1, _2, _3, _4, _5, _6)
      case _1 :: _2 :: _3 :: _4 :: _5 :: _6 :: _7 :: Nil => Tuple7(_1, _2, _3, _4, _5, _6, _7)
      case _1 :: _2 :: _3 :: _4 :: _5 :: _6 :: _7 :: _8 :: Nil =>
        Tuple8(_1, _2, _3, _4, _5, _6, _7, _8)
      case _1 :: _2 :: _3 :: _4 :: _5 :: _6 :: _7 :: _8 :: _9 :: Nil =>
        Tuple9(_1, _2, _3, _4, _5, _6, _7, _8, _9)
      case _1 :: _2 :: _3 :: _4 :: _5 :: _6 :: _7 :: _8 :: _9 :: _10 :: Nil =>
        Tuple10(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10)
      case _1 :: _2 :: _3 :: _4 :: _5 :: _6 :: _7 :: _8 :: _9 :: _10 :: _11 :: Nil =>
        Tuple11(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11)
      case _1 :: _2 :: _3 :: _4 :: _5 :: _6 :: _7 :: _8 :: _9 :: _10 :: _11 :: _12 :: Nil =>
        Tuple12(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12)
      case _1 :: _2 :: _3 :: _4 :: _5 :: _6 :: _7 :: _8 :: _9 :: _10 :: _11 :: _12 :: _13 :: Nil =>
        Tuple13(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13)
      case _1 :: _2 :: _3 :: _4 :: _5 :: _6 :: _7 :: _8 :: _9 :: _10 :: _11 :: _12 :: _13 :: _14 :: Nil =>
        Tuple14(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14)
      case _1 :: _2 :: _3 :: _4 :: _5 :: _6 :: _7 :: _8 :: _9 :: _10 :: _11 :: _12 :: _13 :: _14 :: _15 :: Nil =>
        Tuple15(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15)
      case _1 :: _2 :: _3 :: _4 :: _5 :: _6 :: _7 :: _8 :: _9 :: _10 :: _11 :: _12 :: _13 :: _14 :: _15 :: _16:: Nil =>
        Tuple16(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16)
      case _1 :: _2 :: _3 :: _4 :: _5 :: _6 :: _7 :: _8 :: _9 :: _10 :: _11 :: _12 :: _13 :: _14 :: _15 :: _16 :: _17 :: Nil =>
        Tuple17(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17)
      case _1 :: _2 :: _3 :: _4 :: _5 :: _6 :: _7 :: _8 :: _9 :: _10 :: _11 :: _12 :: _13 :: _14 :: _15 :: _16 :: _17 :: _18:: Nil =>
        Tuple18(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18)
      case _1 :: _2 :: _3 :: _4 :: _5 :: _6 :: _7 :: _8 :: _9 :: _10 :: _11 :: _12 :: _13 :: _14 :: _15 :: _16 :: _17 :: _18:: _19 :: Nil =>
        Tuple19(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19)
      case _1 :: _2 :: _3 :: _4 :: _5 :: _6 :: _7 :: _8 :: _9 :: _10 :: _11 :: _12 :: _13 :: _14 :: _15 :: _16 :: _17 :: _18:: _19 :: _20 ::Nil =>
        Tuple20(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20)
      case _1 :: _2 :: _3 :: _4 :: _5 :: _6 :: _7 :: _8 :: _9 :: _10 :: _11 :: _12 :: _13 :: _14 :: _15 :: _16 :: _17 :: _18:: _19 :: _20 :: _21 :: Nil =>
        Tuple21(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21)
      case _1 :: _2 :: _3 :: _4 :: _5 :: _6 :: _7 :: _8 :: _9 :: _10 :: _11 :: _12 :: _13 :: _14 :: _15 :: _16 :: _17 :: _18:: _19 :: _20 :: _21 :: _22 :: Nil =>
        Tuple22(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22)
      case _ => throw new Exception("can't convert list with length greater than 22 elements")
    }
  }

  def genCaseExpr: String = {
    (1 to 22).map{ i=>
      val ns = (1 to i).toList.map(x => s"_$x")
      s"case ${ns.mkString(" :: ")} :: Nil => Tuple$i(${ns.mkString(", ")})"
    }.mkString("\n")
  }

}
